// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotoNow.Infrastructure.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MotoNow.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250831140259_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MotoNow.Domain.Entities.DeliveryDriver", b =>
                {
                    b.Property<string>("Identifier")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("identifier");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<string>("DriverLicenseClass")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("driver_license_class");

                    b.Property<string>("DriverLicenseImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("driver_license_image_url");

                    b.Property<string>("DriverLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("driver_license_number");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.HasKey("Identifier")
                        .HasName("pk_delivery_drivers");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("ix_delivery_drivers_cnpj");

                    b.HasIndex("DriverLicenseNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_delivery_drivers_driver_license_number");

                    b.HasIndex("Identifier")
                        .IsUnique()
                        .HasDatabaseName("ix_delivery_drivers_identifier");

                    b.ToTable("delivery_drivers", "motonow", t =>
                        {
                            t.HasCheckConstraint("ck_delivery_driver_cnh_class", "driver_license_class IN ('A','B','AB')");

                            t.HasCheckConstraint("ck_delivery_driver_cnh_digits", "driver_license_number ~ '^[0-9]{11}$'");

                            t.HasCheckConstraint("ck_delivery_driver_cnpj_digits", "cnpj ~ '^[0-9]{14}$'");
                        });
                });

            modelBuilder.Entity("MotoNow.Domain.Entities.Motorcycle", b =>
                {
                    b.Property<string>("Identifier")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("identifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("plate");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Identifier")
                        .HasName("pk_motorcycles");

                    b.HasIndex("Plate")
                        .IsUnique()
                        .HasDatabaseName("ix_motorcycles_plate");

                    b.ToTable("motorcycles", "motonow");
                });

            modelBuilder.Entity("MotoNow.Domain.Entities.MotorcycleNotification", b =>
                {
                    b.Property<string>("Identifier")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("identifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("model");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("plate");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("received_at");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Identifier")
                        .HasName("pk_motorcycle_notifications");

                    b.HasIndex("Plate")
                        .HasDatabaseName("ix_motorcycle_notifications_plate");

                    b.HasIndex("Year")
                        .HasDatabaseName("ix_motorcycle_notifications_year");

                    b.ToTable("motorcycle_notifications", "motonow");
                });

            modelBuilder.Entity("MotoNow.Domain.Entities.Rental", b =>
                {
                    b.Property<string>("Identifier")
                        .HasColumnType("text")
                        .HasColumnName("identifier");

                    b.Property<int>("DailyRate")
                        .HasColumnType("integer")
                        .HasColumnName("daily_rate");

                    b.Property<string>("DeliveryDriverId")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasColumnName("delivery_driver_id");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_at");

                    b.Property<DateTime>("ExpectedEndAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_end_at");

                    b.Property<string>("MotorcycleId")
                        .IsRequired()
                        .HasColumnType("character varying(64)")
                        .HasColumnName("motorcycle_id");

                    b.Property<int>("PlanDays")
                        .HasColumnType("integer")
                        .HasColumnName("plan_days");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("return_date");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_at");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.HasKey("Identifier")
                        .HasName("pk_rentals");

                    b.HasIndex("MotorcycleId")
                        .HasDatabaseName("ix_rentals_motorcycle_id");

                    b.HasIndex("DeliveryDriverId", "MotorcycleId", "StartAt", "ReturnDate")
                        .HasDatabaseName("ix_rentals_delivery_driver_id_motorcycle_id_start_at_return_da");

                    b.ToTable("rentals", "motonow", t =>
                        {
                            t.HasCheckConstraint("ck_rental_plan_days", "plan_days > 0");
                        });
                });

            modelBuilder.Entity("MotoNow.Domain.Entities.Rental", b =>
                {
                    b.HasOne("MotoNow.Domain.Entities.DeliveryDriver", null)
                        .WithMany()
                        .HasForeignKey("DeliveryDriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_delivery_drivers_delivery_driver_id");

                    b.HasOne("MotoNow.Domain.Entities.Motorcycle", null)
                        .WithMany()
                        .HasForeignKey("MotorcycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_rentals_motorcycles_motorcycle_id");
                });
#pragma warning restore 612, 618
        }
    }
}
